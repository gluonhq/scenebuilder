import org.apache.tools.ant.filters.EscapeUnicode

buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}

apply plugin: 'application'

mainClassName = 'com.oracle.javafx.scenebuilder.app.SceneBuilderApp'

apply plugin: 'com.github.johnrengelman.shadow'

dependencies {
    compile project(':kit')
}

run {
    doFirst {
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'javafx.fxml,javafx.swing,javafx.web,java.logging,java.scripting',
                '--add-opens=javafx.fxml/javafx.fxml=ALL-UNNAMED'
        ]
        if (platform == 'linux') jvmArgs += '-Djdk.gtk.version=2'
    }
}

shadowJar {
    baseName = 'scenebuilder'

    manifest {
        attributes 'Main-Class': mainClassName
    }

    dependencies {
        exclude(dependency("org.openjfx:javafx-base:11:$platform"))
        exclude(dependency("org.openjfx:javafx-controls:11:$platform"))
        exclude(dependency("org.openjfx:javafx-fxml:11:$platform"))
        exclude(dependency("org.openjfx:javafx-graphics:11:$platform"))
        exclude(dependency("org.openjfx:javafx-media:11:$platform"))
        exclude(dependency("org.openjfx:javafx-swing:11:$platform"))
        exclude(dependency("org.openjfx:javafx-web:11:$platform"))
    }
    exclude 'module-info.class'
}

processResources {
    def buildDate = new Date().format(buildDateFormat)
    from ('src/main/resources') {
        include '**/*.properties'
        expand([
            version: version,
            javaVersion: System.getProperty('java.runtime.version') + ', ' + System.getProperty('java.vendor'),
            buildDate: buildDate
        ])
        filter(EscapeUnicode)
    }
    into buildDir
}

artifacts {
    archives shadowJar
}

apply plugin: 'maven'

uploadArchives {
    repositories {
        mavenDeployer {
            def repoUrl = project.getStringProperty('publishRepositoryUrl', 'http://nexus.gluonhq.com/nexus/content/repositories/releases/');
            def repoUser = project.getStringProperty('publishRepositoryUser', '');
            def repoPassword = project.getStringProperty('publishRepositoryPassword', '');
            snapshotRepository(url: 'http://nexus.gluonhq.com/nexus/content/repositories/snapshots/') {
                authentication userName: repoUser, password: repoPassword
            }
            repository(url: repoUrl) {
                authentication(userName: repoUser, password: repoPassword);
            }
//            addFilter('scenebuilder-all') { artifact, file ->
//                artifact.name == 'scenebuilder-all'
//            }
            addFilter('scenebuilder') { artifact, file ->
                artifact.name == 'scenebuilder'
            }
//            pom('scenebuilder-all') {
//                artifactId = 'scenebuilder-all'
//            }
        }
    }
}

