name: Scene Builder Linux Bundles
on:
  push:
    tags:
      - '*'
jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Install packages
        run: sudo apt-get install xdg-utils
      - uses: actions/checkout@v2
      - name: Setup java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17-ea'
      - name: Store Variables
        id: variables
        run: |
          TAG=${GITHUB_REF/refs\/tags\//}
          VERSION=$TAG
          S3_PATH=${{ env.AWS_S3_BUCKET }}/scenebuilder/$TAG/install/linux/
          if [[ "$TAG" == *-RC* ]]; then
              VERSION=`echo $TAG | cut -d- -f1`
              S3_PATH=${{ env.AWS_S3_BUCKET }}/scenebuilder/RC/$TAG/install/linux/
          fi
          echo ::set-output name=SOURCE_TAG::$TAG
          echo ::set-output name=SOURCE_VERSION::$VERSION
          echo ::set-output name=S3_PATH::$S3_PATH
        shell: bash
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      - name: Setup JavaFX
        run: |
          wget -P /tmp https://download2.gluonhq.com/openjfx/17/openjfx-17_linux-x64_bin-jmods.zip
          unzip /tmp/openjfx-17_linux-x64_bin-jmods.zip -d /tmp
      - name: Build and package JAR
        run: |
          mvn -q versions:set -DnewVersion=${{ env.VERSION }} -DgenerateBackupPoms=false
          mvn -q package -Dmaven.test.skip=true -X
        env:
          VERSION: ${{ steps.variables.outputs.SOURCE_VERSION }}
      - name: Create Bundle using JPackage
        run: |
          # Create DEB
          .github/scripts/jpackage.sh \
          --icon app/assets/linux/icon-linux.png \
          --java-options '"-Djdk.gtk.version=2"' \
          --java-options '"--add-opens=javafx.fxml/javafx.fxml=ALL-UNNAMED"' \
          --java-options '"-Djava.library.path=/opt/scenebuilder/lib/runtime/bin:/opt/scenebuilder/lib/runtime/lib"' \
          --linux-menu-group '"Development;Building;GUIDesigner;Java;"' \
          --resource-dir app/assets/linux
          --install-dir /opt \
          --type deb
          mv $INSTALL_DIR/*.deb $INSTALL_DIR/SceneBuilder-${{ env.TAG }}.deb
          # Create RPM
          .github/scripts/jpackage.sh \
          --icon app/assets/linux/icon-linux.png \
          --java-options '"-Djdk.gtk.version=2"' \
          --java-options '"--add-opens=javafx.fxml/javafx.fxml=ALL-UNNAMED"' \
          --linux-menu-group '"Development;Building;GUIDesigner;Java;"' \
          --resource-dir app/assets/linux
          --install-dir /opt \
          --type rpm
          mv $INSTALL_DIR/*.rpm $INSTALL_DIR/SceneBuilder-${{ env.TAG }}.rpm
          ls $INSTALL_DIR
        env:
          MAIN_CLASS: com.oracle.javafx.scenebuilder.app.SceneBuilderApp
          JAVAFX_HOME: /tmp/javafx-jmods-17/
          JPACKAGE_HOME: ${{ env.JAVA_HOME }}
          TAG: ${{ steps.variables.outputs.SOURCE_TAG }}
          VERSION: ${{ steps.variables.outputs.SOURCE_VERSION }}
          INSTALL_DIR: app/target/install
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: SceneBuilder-${{ runner.os }}
          path: |
            app/target/install/*.deb
            app/target/install/*.rpm
      - name: Upload to AWS S3
        run: |
          aws s3 cp app/target/install/ ${{ env.S3_PATH }} --exclude "**/*" --acl public-read --recursive --region us-east-1 --debug
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_PATH: ${{ steps.variables.outputs.S3_PATH }}
