name: Release

on:
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  JAVA_DISTRO: 'temurin'

jobs:
  precheck:
    runs-on: ubuntu-20.04
    outputs:
      JAVA_VERSION: ${{ env.JAVA_VERSION }}
      JAVA_DISTRO: ${{ env.JAVA_DISTRO }}
      VERSION: ${{ steps.vars.outputs.VERSION }}
      TAG: ${{ steps.vars.outputs.TAG }}
      S3_PATH: ${{ steps.vars.outputs.S3_PATH }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Set environment
        id: vars
        shell: bash
        run: |
          mvn -B versions:set -DremoveSnapshot
          TAG=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          VERSION=$TAG
          S3_PATH=$TAG
          if [[ "$TAG" == *-RC* ]]; then
              VERSION=`echo $TAG | cut -d- -f1`
              S3_PATH=RC/$TAG
          fi
          echo ::set-output name=VERSION::$VERSION
          echo ::set-output name=TAG::$TAG
          echo ::set-output name=S3_PATH::$S3_PATH

  linux-bundles:
    needs: [precheck]
    uses: gluonhq/scenebuilder/.github/workflows/bundles-linux.yml@master
    with:
      java-version: ${{ needs.precheck.outputs.JAVA_VERSION }}
      java-distro: ${{ needs.precheck.outputs.JAVA_DISTRO }}
      version: ${{ needs.precheck.outputs.VERSION }}
      tag: ${{ needs.precheck.outputs.TAG }}
      test: true

  windows-bundles:
    needs: [precheck]
    uses: gluonhq/scenebuilder/.github/workflows/bundles-windows.yml@master
    secrets:
      WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
      WINDOWS_PASSWORD: ${{ secrets.WINDOWS_PASSWORD }}
      WINDOWS_CERTNAME: ${{ secrets.WINDOWS_CERTNAME }}
    with:
      java-version: ${{ needs.precheck.outputs.JAVA_VERSION }}
      java-distro: ${{ needs.precheck.outputs.JAVA_DISTRO }}
      version: ${{ needs.precheck.outputs.VERSION }}
      tag: ${{ needs.precheck.outputs.TAG }}
      test: true

  mac-bundles:
    needs: [precheck]
    uses: gluonhq/scenebuilder/.github/workflows/bundles-mac.yml@master
    secrets:
      CERTIFICATES_FILE_BASE64: ${{ secrets.CERTIFICATES_FILE_BASE64 }}
      CERTIFICATES_PASSWORD: ${{ secrets.CERTIFICATES_PASSWORD }}
      NOTARIZATION_USERNAME: ${{ secrets.NOTARIZATION_USERNAME }}
      NOTARIZATION_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}
      MACSIGN_USER: ${{ secrets.GLUON_MACSIGN_USER }}
      MACSIGN_PREFIX: ${{ secrets.GLUON_MACSIGN_PREFIX }}
    with:
      java-version: ${{ needs.precheck.outputs.JAVA_VERSION }}
      java-distro: ${{ needs.precheck.outputs.JAVA_DISTRO }}
      version: ${{ needs.precheck.outputs.VERSION }}
      tag: ${{ needs.precheck.outputs.TAG }}
      test: true

  kit-bundles:
    needs: [precheck]
    uses: gluonhq/scenebuilder/.github/workflows/bundles-kit.yml@master
    with:
      java-version: ${{ needs.precheck.outputs.JAVA_VERSION }}
      java-distro: ${{ needs.precheck.outputs.JAVA_DISTRO }}
      version: ${{ needs.precheck.outputs.VERSION }}
      tag: ${{ needs.precheck.outputs.TAG }}

  release:
    needs: [precheck, linux-bundles, windows-bundles, mac-bundles, kit-bundles]
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ needs.precheck.outputs.JAVA_VERSION }}
          distribution: ${{ needs.precheck.outputs.JAVA_DISTRO }}

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Maven release
        id: vars
        shell: bash
        run: |
          mvn -B -ntp \
            -Drepository.url=https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git \
            release:prepare
          mvn -pl :parent process-resources

      - name: Download all build artifacts
        uses: actions/download-artifact@v2

      - name: Release with JReleaser
        env:
          VERSION: ${{ needs.precheck.outputs.VERSION }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_ACCESS_TOKEN }}
          JRELEASER_S3_GLUON_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          JRELEASER_S3_GLUON_SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          JRELEASER_S3_GLUON_REGION: us-east-1
          JRELEASER_S3_GLUON_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          TAG: ${{ needs.precheck.outputs.TAG }}
        run: |
          FILES_ACTIVE="RELEASE"
          if [[ "$TAG" == *-RC* ]]; then
              FILES_ACTIVE="NEVER"
          fi
          mvn -B -ntp -pl :parent -DartifactsDir=artifacts -Ds3Path=${{ needs.precheck.outputs.S3_PATH }} \
            -Djreleaser.files.active=$FILES_ACTIVE jreleaser:release

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: jreleaser-logs
          path: |
            target/jreleaser/trace.log
            target/jreleaser/output.properties
