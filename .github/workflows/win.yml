name: Scene Builder Windows Bundles
on:
  push:
    tags:
      - '*'
jobs:
  build:
    runs-on: windows-latest
    env:
      JAVA_VERSION: 17
    steps:
      - uses: actions/checkout@v2
      - name: 'Download OpenJDK'
        run: |
          bitsadmin /Transfer DownloadJavaFX https://download.oracle.com/java/${{ env.JAVA_VERSION }}/archive/jdk-${{ env.JAVA_VERSION }}_windows-x64_bin.zip ${{ runner.temp }}\jdk-${{ env.JAVA_VERSION }}_windows-x64_bin.zip
      - name: Setup java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: jdkfile
          jdkFile: ${{ runner.temp }}\jdk-${{ env.JAVA_VERSION }}_windows-x64_bin.zip
      - name: Store Variables
        id: variables
        run: |
          TAG=${GITHUB_REF/refs\/tags\//}
          VERSION=$TAG
          S3_PATH=${{ env.AWS_S3_BUCKET }}/scenebuilder/$TAG/install/windows/
          if [[ "$TAG" == *-RC* ]]; then
              VERSION=`echo $TAG | cut -d- -f1`
              S3_PATH=${{ env.AWS_S3_BUCKET }}/scenebuilder/RC/$TAG/install/windows/
          fi
          echo ::set-output name=SOURCE_TAG::$TAG
          echo ::set-output name=SOURCE_VERSION::$VERSION
          echo ::set-output name=S3_PATH::$S3_PATH
        shell: bash
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      - name: Setup JavaFX
        run: |
          bitsadmin /Transfer DownloadJavaFX https://download2.gluonhq.com/openjfx/17/openjfx-17_windows-x64_bin-jmods.zip D:\openjfx-17_windows-x64_bin-jmods.zip
          Expand-Archive -Force D:\openjfx-17_windows-x64_bin-jmods.zip D:\
      - name: Build and package JAR
        shell: cmd
        run: |
          call mvn versions:set -DnewVersion=${{ env.VERSION }} -DgenerateBackupPoms=false
          call mvn package -Dmaven.test.skip=true -X
        env:
          VERSION: ${{ steps.variables.outputs.SOURCE_VERSION }}
      - name: Create Bundle using JPackage
        shell: cmd
        run: |
          call .github\scripts\jpackage.bat
          call ren ${{ env.INSTALL_DIR }}\SceneBuilder-${{ env.VERSION }}.msi SceneBuilder-${{ env.TAG }}.msi
          call dir ${{ env.INSTALL_DIR }}
        env:
          MAIN_CLASS: com.oracle.javafx.scenebuilder.app.SceneBuilderApp
          JAVAFX_HOME: D:\javafx-jmods-17
          JPACKAGE_HOME: ${{ env.JAVA_HOME }}
          TAG: ${{ steps.variables.outputs.SOURCE_TAG }}
          VERSION: ${{ steps.variables.outputs.SOURCE_VERSION }}
          INSTALL_DIR: app\target\install
      - name: Codesign
        uses: erwin1/code-sign-action@master
        with:
          certificate: '${{ secrets.WINDOWS_CERTIFICATE }}'
          password: '${{ secrets.WINDOWS_PASSWORD }}'
          certificatename: '${{ secrets.WINDOWS_CERTNAME }}'
          folder: 'app/target/install'
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: SceneBuilder-${{ runner.os }}
          path: app/target/install/*.msi
      - name: Upload to AWS S3
        run: |
          aws s3 cp app/target/install/SceneBuilder-${{ env.TAG }}.msi ${{ env.S3_PATH }} --acl public-read --region us-east-1 --debug
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TAG: ${{ steps.variables.outputs.SOURCE_TAG }}
          S3_PATH: ${{ steps.variables.outputs.S3_PATH }}
